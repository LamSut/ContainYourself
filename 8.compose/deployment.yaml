apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
  labels:
    app: mysql
data:
  init.sql: |
    DO SLEEP(10);
    ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1';
    FLUSH PRIVILEGES;

    DROP DATABASE IF EXISTS pizza;
    CREATE DATABASE pizza;
    USE pizza;

    CREATE TABLE pizza.product (
        productid INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        type VARCHAR(20) NOT NULL,
        description TEXT,
        price FLOAT NOT NULL,
        image VARCHAR(255) DEFAULT NULL
    );

    CREATE TABLE pizza.cart (
        cartid INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        phone VARCHAR(20) NOT NULL,
        address TEXT NOT NULL,
        time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE pizza.item (
        cartid INT,
        productid INT,
        quantity INT NOT NULL,
        FOREIGN KEY (cartid) REFERENCES cart(cartid),
        FOREIGN KEY (productid) REFERENCES product(productid),
        UNIQUE (cartid, productid)
    );
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shared-pv
  labels:
    app: shared-storage
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 20Gi
  nfs:
    path: /mnt/shared-storage
    server: nfs-server.example.com
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-pvc
  labels:
    app: shared-storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  serviceName: mysql
  replicas: 2
  selector:
    matchLabels:
      app: mysql
      tier: database
  template:
    metadata:
      labels:
        app: mysql
        tier: database
    spec:
      containers:
      - image: mysql:8.0
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "1"
        - name: MYSQL_DATABASE
          value: pizza
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: shared-storage
          mountPath: /var/lib/mysql
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: init-script
        configMap:
          name: mysql-init-script
  volumeClaimTemplates:
  - metadata:
      name: shared-storage
    spec:
      accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - image: backend:v1
        name: backend
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "development"
        - name: DB_HOST
          value: "mysql"
        - name: DB_PORT
          value: "3306"
        - name: DB_USER
          value: "root"
        - name: DB_PASS
          value: "1"
        - name: DB_NAME
          value: "pizza"
        volumeMounts:
        - name: shared-storage
          mountPath: /app/data
      volumes:
      - name: shared-storage
        persistentVolumeClaim:
          claimName: shared-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - image: frontend:v1
        name: frontend
        ports:
        - containerPort: 5173
        env:
        - name: NODE_ENV
          value: "development"
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  type: LoadBalancer
  ports:
    - port: 3306
  selector:
    app: mysql
    tier: database
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: backend
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  type: LoadBalancer
  ports:
    - port: 5173
      targetPort: 5173
  selector:
    app: frontend
